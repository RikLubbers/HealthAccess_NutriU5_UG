---
title: "Study1_Code"
author: "Rik Lubbers"
#format: docx
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, fig.show='hide', eval=FALSE)

#fig.show='hide', eval=FALSE
```

# Loading packages

```{r package loading}
# List of required packages
required_packages <- c(
  "NCmisc", "tidyverse", "haven", "lattice", "data.table", "knitr", "survey",
  "expss", "labelled", "table1", "readxl", "GGally", "kableExtra", "xtable",
  "modelsummary", "performance", "finalfit", "naniar", "rms", "openxlsx",
  "rcompanion", "questionr", "flextable", "MASS", "car", "cowplot", "heatmaply",
  "esquisse", "visreg", "forcats", "mosaic", "DT", "mice", "gtsummary", "styler",
  "languageserver", "httpgd", "miceadds"
)

## Function to check and install missing packages
install_missing_packages <- function(packages) {
  missing_packages <- packages[!(packages %in% installed.packages()[,"Package"])]
  if (length(missing_packages) > 0) {
    install.packages(missing_packages, dependencies = TRUE)
  }
}

##Check and install missing packages
install_missing_packages(required_packages)


# Load the installed packages
library(tidyverse)
library(haven)
library(lattice)
library(data.table)
library(knitr)
library(survey)
  options(survey.lonely.psu = "adjust")
library(expss)
library(labelled)
library(table1)
library(readxl)
library(GGally)
library(kableExtra)
library(xtable)
library(modelsummary)
library(performance)
library(finalfit)
library(naniar)
library(rms)
library(openxlsx)
library(rcompanion)
library(questionr)
library(flextable)
library(MASS)
library(car)
library(cowplot)
library(heatmaply)
library(esquisse)
library(visreg)
library(forcats)
library(mosaic)
library(DT)
library(mice)
library(gtsummary)
library(languageserver)
library(httpgd)
library(miceadds)
```

# Data handling
## Loading data and creating subset

```{r Data load and subsetting}
# Load the children dataset from a .SAV file 
## depending on computer  "C:/Users/Rik/OneDrive/PhD_Undernutrition_Uganda_Physical_Accessbility/1_Study_1_Physical_access/Data/DATA/Uganda Full/DHS Clusters/UGKR7BSV_Children/UGKR7BFL.SAV"
##                        "D:/Onedrive/PhD_Undernutrition_Uganda_Physical_Accessbility/1_Study_1_Physical_access/Data/DATA/Uganda Full/DHS Clusters/UGKR7BSV_Children/UGKR7BFL.SAV"

DHS_children_sub <- read_sav("C:/Users/Rik/OneDrive/PhD_Undernutrition_Uganda_Physical_Accessbility/1_Study_1_Physical_access/Data/DATA/Uganda Full/DHS Clusters/UGKR7BSV_Children/UGKR7BFL.SAV") %>% 
  dplyr::select(
    CASEID,
    V001, V005,
    V023, V024,
    V149, V729,
    V191, V212,
    V445, V714,
    BIDX, B0, B4,
    B5,   BORD,
    HW5,  HW8,
    HW11, M19,
    B11,  H11,
    V113, M5,
    V136,
    V481, H22,
    V505, H7
  )


# Load the travel time data from an Excel file
## Depending on computer    "C:/Users/Rik/OneDrive/PhD_Undernutrition_Uganda_Physical_Accessbility/1_Study_1_Physical_access/Data/DATA/Uganda Full/Analyses/Travel_time.xls"
##                          "D:/Onedrive/PhD_Undernutrition_Uganda_Physical_Accessbility/1_Study_1_Physical_access/Data/DATA/Uganda Full/Travel_Time/Travel_time.xls"   
Travel_time_clust = read_xls("C:/Users/Rik/OneDrive/PhD_Undernutrition_Uganda_Physical_Accessbility/1_Study_1_Physical_access/Data/DATA/Uganda Full/Travel_Time/Travel_time.xls" , col_names = TRUE)


# Merge the children dataset with the travel time data using the common column "V001" in both datasets
DHS_children_sub = merge(DHS_children_sub, Travel_time_clust, by.x = "V001", by.y = "DHSCLUST")


# Convert the NEAR_DIST column from meters to kilometers
DHS_children_sub$NEAR_DIST = DHS_children_sub$NEAR_DIST/1000
```

#### Removing unnecessary SPSS metadata

```{r removing metadata}
# Remove unnecessary SPSS metadata from the children dataset
## Remove variable formats
DHS_children_sub <- zap_formats(DHS_children_sub)

## Remove variable widths
DHS_children_sub <- zap_widths(DHS_children_sub)

## Remove variable labels
DHS_children_sub <- zap_labels(DHS_children_sub)

## Remove variable label
DHS_children_sub <- zap_label(DHS_children_sub)
```

## Defining missing data
```{r missing data}
# Replace specific values with NA (missing data) in various columns
## For column HW5, replace 9998 and 9999 with NA
DHS_children_sub$HW5[DHS_children_sub$HW5 == 9998] = NA
DHS_children_sub$HW5[DHS_children_sub$HW5 == 9999] = NA

## For column HW8, replace 9998 and 9999 with NA
DHS_children_sub$HW8[DHS_children_sub$HW8 == 9998] = NA
DHS_children_sub$HW8[DHS_children_sub$HW8 == 9999] = NA

## For column HW11, replace 9998 and 9999 with NA
DHS_children_sub$HW11[DHS_children_sub$HW11 == 9998] = NA
DHS_children_sub$HW11[DHS_children_sub$HW11 == 9999] = NA

## For column V149, replace 9 with NA
DHS_children_sub$V149[DHS_children_sub$V149 == 9] = NA

## For column V729, replace 9 with NA
DHS_children_sub$V729[DHS_children_sub$V729 == 9] = NA

## For column V445, replace 9998 and 9999 with NA
DHS_children_sub$V445[DHS_children_sub$V445 == 9998] = NA
DHS_children_sub$V445[DHS_children_sub$V445 == 9999] = NA

## For column V714, replace 9 with NA
DHS_children_sub$V714[DHS_children_sub$V714 == 9] = NA

## For column M19, replace 9996, 9998, and 9999 with NA
DHS_children_sub$M19[DHS_children_sub$M19 == 9996] = NA
DHS_children_sub$M19[DHS_children_sub$M19 == 9998] = NA
DHS_children_sub$M19[DHS_children_sub$M19 == 9999] = NA

## For column H11, replace 8 and 9 with NA
DHS_children_sub$H11[DHS_children_sub$H11 == 8] = NA
DHS_children_sub$H11[DHS_children_sub$H11 == 9] = NA

## For column M5, replace 93, 94, 97, 98, and 99 with NA
DHS_children_sub$M5[DHS_children_sub$M5 == 93] = NA
DHS_children_sub$M5[DHS_children_sub$M5 == 94] = NA
DHS_children_sub$M5[DHS_children_sub$M5 == 97] = NA
DHS_children_sub$M5[DHS_children_sub$M5 == 98] = NA
DHS_children_sub$M5[DHS_children_sub$M5 == 99] = NA

## For column V113, replace 99, 97, and 96 with NA
DHS_children_sub$V113[DHS_children_sub$V113 == 99] = NA
DHS_children_sub$V113[DHS_children_sub$V113 == 97] = NA
DHS_children_sub$V113[DHS_children_sub$V113 == 96] = NA

## For column H7, replace 8 and 9 with NA
DHS_children_sub$H7[DHS_children_sub$H7 == 8] = NA
DHS_children_sub$H7[DHS_children_sub$H7 == 9] = NA

## For column V481, replace 9 with NA
DHS_children_sub$V481[DHS_children_sub$V481 == 9] = NA

## For column H22, replace 8 and 9 with NA
DHS_children_sub$H22[DHS_children_sub$H22 == 8] = NA
DHS_children_sub$H22[DHS_children_sub$H22 == 9] = NA

## For column V505, replace 98 and 99 with NA
DHS_children_sub$V505[DHS_children_sub$V505 == 98] = NA
DHS_children_sub$V505[DHS_children_sub$V505 == 99] = NA
```

## Recoding variables

```{r recoding}
# Transforming variables into more interpretable formats
## Birth interval: Dichotomize into more or less than 24 months
DHS_children_sub$B11 = ifelse(DHS_children_sub$B11 >= 24, 0, 1)

## Combined diarrhea in the last 24 hours and 2 weeks into one category
DHS_children_sub$H11 = ifelse(DHS_children_sub$H11 == 0, 0, 1)

## Recode source of drinking water into simplified categories
DHS_children_sub$V113 = expss::recode(DHS_children_sub$V113, 
  11 %thru% 14 ~ 1, 21 ~ 2, 31 %thru% 32 ~ 3, 41 %thru% 43 ~ 4, 51 ~ 5, 63 ~ 6, 71 ~ 6)

## Convert the variables into factors
DHS_children_sub$B11 = factor(DHS_children_sub$B11,
  levels = c(0, 1),
  labels = c("Birth interval more than 24 months", "Birth interval less than 24 months")
)

DHS_children_sub$H11 = factor(DHS_children_sub$H11,
  levels = c(0, 1),
  labels = c("No diarrhea in the last 2 weeks", "Had diarrhea in the last 2 weeks")
)

## Recode the sex of the child
DHS_children_sub$B4 = ifelse(DHS_children_sub$B4 == 1, 0, 1) %>% factor(levels = c(0, 1), labels = c("Male","Female"))

## Create a factor for twin births
DHS_children_sub$B0 = factor(DHS_children_sub$B0, levels = c(0:3),
  labels = c("Single Birth", "1st of multiple", "2nd of multiple", "3rd of multiple"))

## Recode DPT 3 into yes and no answers and make it a factor
DHS_children_sub$H7 = ifelse(DHS_children_sub$H7 == 0, 0, 1)
DHS_children_sub$H7 = factor(DHS_children_sub$H7, 
  levels = c(0, 1), 
  labels = c("No have not received", "Yes, received DPT 3")
)

## Set other variables as factors
DHS_children_sub$V149 = factor(DHS_children_sub$V149, 
  levels = c(0, 1, 2, 3, 4, 5), 
  labels = c("No education", "Incomplete Primary", "Complete primary", "Incomplete secondary", "Complete secondary", "Higher")
)

DHS_children_sub$V729 = factor(DHS_children_sub$V729, 
  levels = c(0, 1, 2, 3, 4, 5), 
  labels = c("No education", "Incomplete Primary", "Complete primary", "Incomplete secondary", "Complete secondary", "Higher")
)

DHS_children_sub$V714 = factor(DHS_children_sub$V714, 
  levels = c(0, 1), 
  labels = c("Not working", "Currently working")
)

DHS_children_sub$V113 = factor(DHS_children_sub$V113, 
  levels = c(1, 2, 3, 4, 5, 6), 
  labels = c("Piped Water", "Tube Well Water", "Dug Well (Open/Protected", "Surface from Spring", "Rainwater", "Other")
)

DHS_children_sub$V481 = factor(DHS_children_sub$V481, 
  levels = c(0, 1), 
  labels = c("No", "Yes")
)

DHS_children_sub$H22 = factor(DHS_children_sub$H22, 
  levels = c(0, 1), 
  labels = c("No", "Yes")
)

## Scaling certain variables for better interpretation
DHS_children_sub$HW5 = DHS_children_sub$HW5 / 100
DHS_children_sub$HW8 = DHS_children_sub$HW8 / 100
DHS_children_sub$HW11 = DHS_children_sub$HW11 / 100
DHS_children_sub$V445 = DHS_children_sub$V445 / 100
DHS_children_sub$V191 = DHS_children_sub$V191 / 1000

## Create categorical variables for stunting, underweight, wasting, severe acute malnutrition, region, and travel time
DHS_children_sub$HW5_cat = ifelse(DHS_children_sub$HW5 >= -2, 0, 1) %>% 
  factor(levels = c(0, 1), 
  labels = c("Not stunted", "Stunted")
)

DHS_children_sub$HW8_cat = ifelse(DHS_children_sub$HW8 >= -2, 0, 1) %>% 
  factor(levels = c(0, 1), 
  labels = c("Not underweight", "Underweight")
)

DHS_children_sub$HW11_cat = ifelse(DHS_children_sub$HW11 >= -2, 0, 1) %>% 
  factor(levels = c(0, 1), 
  labels = c("Not wasted", "Wasted")
)

DHS_children_sub$SAM = ifelse(DHS_children_sub$HW11 >= -3, 0, 1) %>% 
  factor(levels = c(0, 1), 
  labels = c("Not SAM", "SAM")
)

DHS_children_sub$V024 = factor(DHS_children_sub$V024,
  levels = c(0:14),
  labels = c("Kampala", "South Buganda", "North Buganda", "Busoga", "Bukedi", "Bugisu", "Teso", "Karamoja", "Lango", "Acholi", "West Nile", "Bunyoro", "Tooro", "Ankole", "Kigezi")
)

## Rename the Travel time variable
DHS_children_sub = dplyr::rename(DHS_children_sub, travel_time = raster_travel_time_Lower_travel_time_V1)

## Create a categorical variable for travel time
DHS_children_sub$travel_time_cat = expss::recode(DHS_children_sub$travel_time, 
  0 %thru% 30 ~ 1, 
  31 %thru% 60 ~ 2, 
  61 %thru% 120 ~ 3, 
  121 %thru% 999 ~ 4
) %>% 
  factor(levels = c(1, 2, 3, 4), 
  labels = c("30 min. or less", "30 - 60 min.", "1 -2 hours", "More than 2 hours")
)

Travel_time_clust$travel_time_cat = expss::recode(Travel_time_clust$raster_travel_time_Lower_travel_time_V1, 
  0 %thru% 30 ~ 1, 
  31 %thru% 60 ~ 2, 
  61 %thru% 120 ~ 3, 
  121 %thru% 999 ~ 4
) %>% 
  factor(levels = c(1, 2, 3, 4), 
  labels = c("30 min. or less", "30 - 60 min.", "1 -2 hours", "More than 2 hours")
)
```

## Providing labels

```{r providing labels}
# Assigning variable labels to the dataset
var_lab(DHS_children_sub$V001) = "Cluster number"
var_lab(DHS_children_sub$V005) = "Women's individual sample weight"
var_lab(DHS_children_sub$V023) = "Stratification used in sample design"
var_lab(DHS_children_sub$BORD) = "Birth order"
var_lab(DHS_children_sub$V149) = "Educational attainment of the mother"
var_lab(DHS_children_sub$V729) = "Educational attainment of the father"  
var_lab(DHS_children_sub$V191) = "Wealth index"
var_lab(DHS_children_sub$V212) = "Age of respondent at first birth"
var_lab(DHS_children_sub$V445) = "BMI of mother (kg/m^2)"
var_lab(DHS_children_sub$V714) = "Work status of mother"
var_lab(DHS_children_sub$B4)   = "Sex of child"
var_lab(DHS_children_sub$HW5)  = "Stunting (continious)"
var_lab(DHS_children_sub$HW8)  = "Underweight (continious)"  
var_lab(DHS_children_sub$HW11) = "Wasting (continious)"
var_lab(DHS_children_sub$V024) = "Region"
var_lab(DHS_children_sub$M19)  = "Birth weight in grams"
var_lab(DHS_children_sub$M5)   = "Duration of breastfeeding"
var_lab(DHS_children_sub$V113) = "Source of drinking water"
var_lab(DHS_children_sub$V136) = "Number of household members"
var_lab(DHS_children_sub$V481) = "Covered by health insurance"
var_lab(DHS_children_sub$H22)  = "Fever last two weeks"
var_lab(DHS_children_sub$V505) = "Number of other wives"
var_lab(DHS_children_sub$V714) = "Mother is currently working"
var_lab(DHS_children_sub$V729) = "Education of father/partner"
var_lab(DHS_children_sub$V024) = "Region of residence"
var_lab(DHS_children_sub$SAM)  = "SAM categorical"
var_lab(DHS_children_sub$V149) = "Education of mother"
var_lab(DHS_children_sub$B4)   = "Sex"
var_lab(DHS_children_sub$H11)  = "Had diarrhea in the last two weeks"
var_lab(DHS_children_sub$B11)  = "Preceding birth interval <=24"
var_lab(DHS_children_sub$B0)   = "Child is twin"
var_lab(DHS_children_sub$HW11_cat) = "Wasted categorical"
var_lab(DHS_children_sub$HW8_cat)  = "Underweight categorical"
var_lab(DHS_children_sub$HW5_cat)  = "Stunting categorical"
var_lab(DHS_children_sub$travel_time) = "Travel Time in min."
var_lab(DHS_children_sub$URBAN_RURA) = "Cluster type urban/rural"
var_lab(DHS_children_sub$NEAR_DIST)  = "Distance to nearest HC facility in km."
var_lab(DHS_children_sub$H7)  = "Child has received DPT3 vaccination"
var_lab(DHS_children_sub$travel_time_cat) = "Travel Time Categorical"
var_lab(Travel_time_clust$travel_time_cat) = "Travel Time Categorical"
```

## Removing invalid data

```{r removing invalid data}
# Removing invalid data
## Filter out rows with children who are no longer alive (B5 == 1)
DHS_children_sub = subset(DHS_children_sub, B5 == 1)

## Keep only children with anthropometric measurements (non-missing HW5 values)
DHS_children_sub = DHS_children_sub %>% drop_na(HW5)
```

# Creating table 1

```{r table 1}
# Creating Tables 1 for stunting, underweight, and wasting
## Custom function to calculate p-values for group differences
pvalue <- function(x, ...) {
    # Construct vectors of data y and groups (strata) g
    y <- unlist(x)
    g <- factor(rep(1:length(x), times=sapply(x, length)))
    if (is.numeric(y)) {
        # For numeric variables, perform a standard 2-sample t-test
        p <- t.test(y ~ g)$p.value
    } else {
        # For categorical variables, perform a chi-squared test of independence
        p <- chisq.test(table(y, g))$p.value
    }
    # Format the p-value, using an HTML entity for the less-than sign.
    # The initial empty string places the output on the line below the variable label.
    c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}


# Stunting
## Calculate Table 1 for stunting
table1_stunted = table1(~ B4 + BORD + B0 + M19 + B11 + H11 + H22 + H7 + V481 + V149 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + travel_time | HW5_cat, data=DHS_children_sub, topclass="Rtable1-zebra")

## Calculate group differences for stunting
table1_stunted = table1(~ B4 + BORD + B0 + M19 + B11 + H11 + H22 + H7 + V481 + V149 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + travel_time | HW5_cat, data=DHS_children_sub, topclass="Rtable1-zebra", extra.col=list(`P-value`=pvalue), overall=F)

## Display the stunting Table 1
table1_stunted


# Wasting
## Calculate Table 1 for wasting
table1_wasted = table1(~ B4 + BORD + B0 + M19 + B11 + H11 + H22 + H7 + V481 + V149 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + travel_time | HW11_cat, data=DHS_children_sub, topclass="Rtable1-zebra")

## Calculate group differences for wasting
table1_wasted = table1(~ B4 + BORD + B0 + M19 + B11 + H11 + H22 + H7 + V481 + V149 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + travel_time | HW11_cat, data=DHS_children_sub, topclass="Rtable1-zebra", extra.col=list(`P-value`=pvalue), overall=F)

## Display the wasting Table 1
table1_wasted


# Underweight
## Calculate Table 1 for underweight
table1_underweight = table1(~ B4 + BORD + B0 + M19 + B11 + H11 + H22 + H7 + V481 + V149 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + travel_time | HW8_cat, data=DHS_children_sub, topclass="Rtable1-zebra")

## Calculate group differences for underweight
table1_underweight = table1(~ B4 + BORD + B0 + M19 + B11 + H11 + H22 + H7 + V481 + V149 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + travel_time | HW8_cat, data=DHS_children_sub, topclass="Rtable1-zebra", extra.col=list(`P-value`=pvalue), overall=F)

## Display the underweight Table 1
table1_underweight
```

# Exploring Missing values

```{r investigating missing data}
# Investigating missing data
## Calculate the proportion of missing values for each variable
prop_miss(DHS_children_sub)

## Count the number of missing values for each variable
n_miss(DHS_children_sub)

## Summary of missing values by variable
miss_var_summary(DHS_children_sub)

## Summary of missing values by case
miss_case_summary(DHS_children_sub)

## Create a table showing patterns of missing data
miss_case_table(DHS_children_sub)

## Visualize missing data
vis_miss(DHS_children_sub) + theme(axis.text.x = element_text(angle=80))

gg_miss_upset(DHS_children_sub)

## Define dependent and explanatory variables for missing data analysis
dependent1 = "HW5"
dependent2 = "HW8"
dependent3 = "HW11"
explanatory = c("V149", "V729", "V191", "V212", "V445", "V714", "B4", "BORD", "M19", "B11", "H11", "V113", "V136", "H7", "V481", "H22", "V505", "travel_time")

## Create missing data plots for dependent1, dependent2, and dependent3
missing_plot(DHS_children_sub, dependent1, explanatory)
missing_plot(DHS_children_sub, dependent2, explanatory)
missing_plot(DHS_children_sub, dependent3, explanatory)

## Generate summary tables for missing data
missing1 = ff_glimpse(DHS_children_sub, dependent1, explanatory)
flextable(missing1$Continuous) #%>%
  save_as_image("missing_cont.png")
flextable(missing1$Categorical) #%>%
  save_as_image("missing_cat.png")

ff_glimpse(DHS_children_sub, dependent2, explanatory)
ff_glimpse(DHS_children_sub, dependent3, explanatory)

## Create missing data pair plots for dependent1, dependent2, and dependent3
DHS_children_sub %>%
  missing_pairs(dependent1, explanatory, position = "fill")

DHS_children_sub %>%
  missing_pairs(dependent2, explanatory, position = "fill")

DHS_children_sub %>%
  missing_pairs(dependent3, explanatory, position = "fill")
```

## Imputing missing data

```{r imputing missing data}
# Imputing Data using Multiple Imputation by Chained Equation (MICE)
## Create a predictor matrix for imputation
pred_mat = quickpred(DHS_children_sub, mincor = 0.25)

## Perform multiple imputations (m=20) using the MICE package. used 20 imputations for replicitable SE. 2- 10 is advised but we are more liberal with 20 for reproducible SE
DHS_children_sub_multimp <- mice(DHS_children_sub, m=20, predictorMatrix = pred_mat, set.seed = 123, method = "pmm")

## Generate the completed dataset after imputation
DHS_children_sub <- mice::complete(DHS_children_sub_multimp)


# Check the quality of imputations by visualizing imputed data distribution
## Density plot for all variables
densityplot(DHS_children_sub_multimp)

## Density plot for a specific variable (e.g., H7)
densityplot(DHS_children_sub_multimp, ~H7)

## Density plot for a specific variable (e.g., H7) by imputation set
densityplot(DHS_children_sub_multimp, ~H7 | .imp)
```

# Applying survey weights

```{r survey weights}
# Apply survey weights to the dataset
## Divide the weight variable by 1000000
DHS_children_sub$V005 = DHS_children_sub$V005 / 1000000

## Create survey weights using the svydesign function
DHS_children_sub_weighted <- svydesign(
  id = DHS_children_sub$V001,
  strata = DHS_children_sub$V023,
  weights = DHS_children_sub$V005,
  nest = TRUE,
  data = DHS_children_sub,
  variables = NULL
)
```

# Statistical testing

## GLM stunting

```{r GLM stunting}
# Generalized Linear Model for Stunting (HW5)
## Initial GLM with all potential predictors
glm_stunted = svyglm(formula = HW5 ~ B4 + BORD + B0 + M19 + B11 + H11 + H22 + V481 +  V149 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + M5 + H7 + travel_time,
              design = DHS_children_sub_weighted,
              family = gaussian(),
              rescale = T)

## Removing V149 and B0 due to high VIF (multicollinearity)
glm_stunted = svyglm(formula = HW5 ~ B4 + BORD + M19 + B11 + H11 + H22 + V481  + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + M5 + H7 + travel_time,
              design = DHS_children_sub_weighted,
              family = gaussian(),
              rescale = T)

## Null model (no predictors)
glm_stuned_null = svyglm(formula = HW5 ~ 1,
                         family = gaussian(),
                         design = DHS_children_sub_weighted,
                         rescale = T)

## GLM with travel_time_cat as a predictor instead of the continuous variable
glm_stunted = svyglm(formula = HW5 ~ B4 + BORD + M19 + B11 + H11 + H22 + V481  + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + M5 + H7 + travel_time_cat,
              design = DHS_children_sub_weighted,
              family = gaussian(),
              rescale = T)

## Stepwise model selection using AIC
glm_stunted = stepAIC(glm_stunted, direction = "both")


# Model summary and checking
modelsummary(glm_stunted, stars = T, coef_rename = TRUE)
summary(glm_stunted)
check_model(glm_stunted)

## Plot the GLM model
plot(glm_stunted)

## Model performance metrics
performance(glm_stunted)

## Calculate the variance inflation factor (VIF) for the model
vif(glm_stunted)

## Visualize regression relationships
ggcoef_model(glm_stunted)
```

## GLM underweight

```{r GLM underweight}
# Generalized Linear Model for Underweight (HW8)
## Initial GLM with all potential predictors
glm_underweight = svyglm(formula = HW8 ~ B4 + BORD + B0 + M19 + B11 + H11 + H22 + V481 + V149 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + M5 + H7 + travel_time,
              design = DHS_children_sub_weighted,
              family = gaussian(),
              rescale = T)

## Removing V149 and B0 due to high VIF (multicollinearity)
glm_underweight = svyglm(formula = HW8 ~ B4 + BORD + M19 + B11 + H11 + H22 + V481 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + M5 + H7 + travel_time,
              design = DHS_children_sub_weighted,
              family = gaussian(),
              rescale = T)

## GLM with travel_time_cat as a predictor instead of continuous variable
glm_underweight = svyglm(formula = HW8 ~ B4 + BORD + M19 + B11 + H11 + H22 + V481 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + M5 + H7 + travel_time_cat,
              design = DHS_children_sub_weighted,
              family = gaussian(),
              rescale = T)

## Stepwise model selection using AIC
glm_underweight = stepAIC(glm_underweight, direction = "both")


# Model summary and checking
modelsummary(glm_underweight, stars = T, coef_rename = TRUE)
summary(glm_underweight)
check_model(glm_underweight)

## Plot the GLM model
plot(glm_underweight)

## Model performance metrics
performance(glm_underweight)

## Calculate the variance inflation factor (VIF) for the model
vif(glm_underweight)

## Visualize regression relationships
ggcoef_model(glm_underweight)
```

## GLM wasting

```{r GLM wasting}
# Generalized Linear Model for Wasting (HW11)
## Initial GLM with all potential predictors
glm_wasted = svyglm(formula = HW11 ~ B4 + BORD + B0 + M19 + B11 + H11 + H22 + V481 + V149 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + M5 + H7 + travel_time,
              design = DHS_children_sub_weighted,
              family = gaussian(),
              rescale = T)

## Removing V149 and B0 due to high VIF (multicollinearity)
glm_wasted = svyglm(formula = HW11 ~ B4 + BORD + M19 + B11 + H11 + H22 + V481 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + M5 + H7 + travel_time,
              design = DHS_children_sub_weighted,
              family = gaussian(),
              rescale = T)

## GLM with travel_time_cat as a predictor instead of continuous variable
glm_wasted = svyglm(formula = HW11 ~ B4 + BORD + M19 + B11 + H11 + H22 + V481 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + M5 + H7 + travel_time_cat,
              design = DHS_children_sub_weighted,
              family = gaussian(),
              rescale = T)

## Stepwise model selection using AIC
glm_wasted = stepAIC(glm_wasted, direction = "both")


# Model summary and checking
modelsummary(glm_wasted, stars = T, coef_rename = TRUE)
summary(glm_wasted)
check_model(glm_wasted)

## Plot the GLM model
plot(glm_wasted)

## Model performance metrics
performance(glm_wasted)

## Calculate the variance inflation factor (VIF) for the model
vif(glm_wasted)

## Visualize regression relationships
ggcoef_model(glm_wasted)
```

## Model comparison

```{r Model comparison}
# Comparing Models for Stunting, Wasting, and Underweight
## Create a list of the GLMs for stunting, wasting, and underweight
models = modelsummary(list(glm_stunted, glm_wasted, glm_underweight), stars = TRUE, coef_rename = T, col.names=c("", "Stunting", "Wasting", "Underweight")) 

## Display the model summary
models


# Define the output file and statistics type
## output = "models.docx"  # Uncomment this line if you want to save the results to a Word document
statistic = 'conf.int'


# Define which statistics to include in the comparison
## gof_map = c("nobs", "rmse")  # Uncomment this line if you want to include additional statistics


# Compare the models and create a comparison plot
ggcoef_compare(model = list("Stunted" = glm_stunted, "Wasted" = glm_wasted, "Underweight" = glm_underweight),
               type = "dodged",
               conf.int = TRUE,
               conf.level = 0.95,
               add_reference_rows = TRUE,
               significance = 0.05,
               include = c("V729", "V191", "V445", "B4", "BORD", "M19", "B11", "V113", "M5", "V505", "H7", "travel_time_cat"),
               no_reference_row = c("B11", "H7"))

```

```{r Model comparison 2}
# Comparing Models for Stunting, Wasting, and Underweight with or without pooling and MICE
## Stunting  
MICE_model_stunt = with(DHS_children_sub_multimp, lm(HW5 ~ B4 + BORD + M19 + B11 + H11 + H22 + V481 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + M5 + H7 + travel_time,))

modelsummary((pool(MICE_model_stunt)), stars = TRUE, coef_rename = T)

## Wasting
MICE_model_wast = with(DHS_children_sub_multimp, lm(HW11 ~ B4 + BORD + M19 + B11 + H11 + H22 + V481 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + M5 + H7 + travel_time,))

modelsummary((pool(MICE_model_wast)), stars = TRUE, coef_rename = T)

## Underweight
MICE_model_underweight= with(DHS_children_sub_multimp, lm(HW8 ~ B4 + BORD + M19 + B11 + H11 + H22 + V481 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + M5 + H7 + travel_time,))

modelsummary((pool(MICE_model_underweight)), stars = TRUE, coef_rename = T)


# Comparison of MICE Models
## MICE models
MICEmodels = modelsummary(list(MICE_model_stunt, MICE_model_wast, MICE_model_underweight), stars = TRUE, coef_rename = T, col.names=c("", "Stunting", "Wasting", "Underweight"))

## Display the model summary
MICEmodels
```

# Weighted MICE models
```{r Weighted MICE models}
# do imputation
DHS_children_sub_multimp_weighted <- mice::mice( DHS_children_sub, predictorMatrix= pred_mat, method= "PMM",
           imputationWeights = DHS_children_sub$v005, m=20, maxit = 5, set.seed = 123) 

## Stunting  
MICE_model_stunt_weight = with(DHS_children_sub_multimp_weighted, lm(HW5 ~ B4 + BORD + M19 + B11 + H11 + H22 + V481 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + M5 + H7 + travel_time,))

modelsummary((pool(MICE_model_stunt_weight)), stars = TRUE, coef_rename = T)

## Wasting
MICE_model_wast_weight = with(DHS_children_sub_multimp_weighted, lm(HW11 ~ B4 + BORD + M19 + B11 + H11 + H22 + V481 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + M5 + H7 + travel_time,))

modelsummary((pool(MICE_model_wast_weight)), stars = TRUE, coef_rename = T)

## Underweight
MICE_model_underweight_weight = with(DHS_children_sub_multimp_weighted, lm(HW8 ~ B4 + BORD + M19 + B11 + H11 + H22 + V481 + V729 + V505 + V191 + V212 + V445 + V714 + V113 + V136 + M5 + H7 + travel_time,))

modelsummary((pool(MICE_model_underweight_weight)), stars = TRUE, coef_rename = T)

MICEmodels_weight = modelsummary(list(MICE_model_stunt, MICE_model_wast, MICE_model_underweight), stars = TRUE, coef_rename = T, col.names=c("", "Stunting", "Wasting", "Underweight"))

MICEmodels_weight
```